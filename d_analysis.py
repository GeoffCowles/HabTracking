{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b5a3256",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python3\n",
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Created on Mon Mar 21 16:02:56 2022\n",
    "\n",
    "@author: lcabral4\n",
    "\"\"\"\n",
    "\n",
    "from parcels import FieldSet, ParticleSet, JITParticle, AdvectionRK4, ErrorCode, Variable\n",
    "from datetime import timedelta, datetime\n",
    "import numpy as np\n",
    "import random\n",
    "import netCDF4\n",
    "import sys\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import matplotlib.pyplot as plt\n",
    "import cartopy.crs as ccrs \n",
    "#from mpl_toolkits.basemap import Basemap\n",
    "from cartopy import config\n",
    "import cartopy.crs as ccrs\n",
    "import cartopy.mpl.ticker as cticker \n",
    "from parcels import plotting\n",
    "import matplotlib.pylab as pl\n",
    "import cartopy.feature as cfeature\n",
    "#from x import *\n",
    "from matplotlib.colors import ListedColormap\n",
    "#from Southern_Greenland import *\n",
    "\n",
    "from mpl_toolkits.axes_grid1 import make_axes_locatable\n",
    "import os\n",
    "\n",
    "from netCDF4 import Dataset\n",
    "\n",
    "ncfile = '/home/lcabral4/WHOI/HAB3/HabTracking/float_output/England1.nc'\n",
    "\n",
    "\n",
    "data = Dataset(ncfile)\n",
    "\n",
    "y = data.variables['lat'][:]\n",
    "\n",
    "x = data.variables['lon'][:]\n",
    "time = data.variables['time'][:]\n",
    "temp = data.variables['temp'][:]\n",
    "\n",
    "from shapely.geometry import LineString, MultiLineString\n",
    "from shapely.geometry import Polygon, Point\n",
    "\n",
    "fig = plt.figure(figsize=(13,10))\n",
    "\n",
    "ax = plt.axes(projection=ccrs.PlateCarree())\n",
    "ax.set_extent([-74,-1, 70, 20], ccrs.PlateCarree())\n",
    "ax.coastlines()\n",
    "ax.add_feature(cfeature.LAND)\n",
    "ax.add_feature(cfeature.COASTLINE)\n",
    "\n",
    "lon_formatter = cticker.LongitudeFormatter()\n",
    "ax.xaxis.set_major_formatter(lon_formatter)\n",
    "ax.set_xticks([-75, -70, -65, -60, -55, -50, -45, -40, -35, -30, -25, -20, -15, -10,-5, 0, 5, 10, 15, 20, 25], crs=ccrs.PlateCarree())\n",
    "ax.set_yticks([30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85], crs=ccrs.PlateCarree())\n",
    "\n",
    "\n",
    "lat_formatter = cticker.LatitudeFormatter()\n",
    "\n",
    "current_directory = os.getcwd()\n",
    "#final = open (current_directory + \"/_rundata/box.log\", \"a\")\n",
    "#final.write(\"x(lon)  y(lat)  temp(C)  \\n\")\n",
    "\n",
    "starting_longitude = []\n",
    "ending_longitude = []\n",
    "starting_time = []\n",
    "ending_time = []\n",
    "starting_lat = []\n",
    "ending_lat = []\n",
    "particle_number = []\n",
    "#f = open (current_directory + \"/_rundata\" + \"/binary_output.log\", \"w\")\n",
    "for p in range(x.shape[0]):\n",
    "#    if np.any(x[p,:] >=-70) and np.any(x[p,:] <=-65) and np.any(y[p,:] <=45) and np.any(y[p,:] >=40):\n",
    "\n",
    "        \n",
    "    plt.scatter(x[p,:], y[p,:], c=temp[p,:], s=0.0001, marker = \"o\")\n",
    "    plt.scatter(x[:,0], y[:,0]) \n",
    "#        print(x[p,0], 'lon start', y[p,0], 'lat start', x[p,-1], 'lon end', y[p,-1], 'lat end')\n",
    "#        print(time[p,0], 'time start', time[p,-1], 'time end')\n",
    "#        print(p)\n",
    "#        print('-----------------------------------------------------------------------------') \n",
    "        \n",
    "#        np.savetxt(\"array.txt\", x[p,0])\n",
    "#        starting_longitude.append(x[p,0])\n",
    "#        ending_longitude.append(x[p,-1])\n",
    "#        starting_lat.append(y[p,0])\n",
    "#        ending_lat.append(y[p,-1])\n",
    "#        starting_time.append(time[p,0])\n",
    "#        ending_time.append(time[p,-1])\n",
    "#        particle_number.append(p)\n",
    "#        f.write (\"lon start  lon end   lat start  lat end    time start time end \\n\")\n",
    "#       f.write (\"=====================================================================\\n\")\n",
    "#        f.write (x[p,0] + \" \" + x[p,-1] + \" \" + y[p,0] + \" \" \\\n",
    "#        + y[p,-1] + \" \" + time[p,0] + \"\\n\")\n",
    "#f.close()\n",
    "#        final.write(str(x[p,:]) + \" \" + str(y[p,:]) + \" \" + str(temp[p,:]) + \"\\n\")\n",
    "\n",
    "#final.close()\n",
    "c = plt.colorbar(shrink = .7855)\n",
    "plt.clim(-2.5, 27.5) \n",
    "\n",
    "#print(temp, 'temp')\n",
    "#coord = [[-70,40], [-70,45],[-65,45], [-65,40]]\n",
    "#poly = Polygon(((-70, 40), (-70, 45), (-65, 45), (-65, 40)))\n",
    "#print(poly)\n",
    "#poly = MultiPoint(coords).convex_hull\n",
    "#coord.append(coord[0])\n",
    "#xs, ys = zip(*coord) #create lists of x and y values \n",
    "#plt.plot(xs,ys) \n",
    "\n",
    "\n",
    "# plot\n",
    "\n",
    "#print(particle_number)\n",
    "\n",
    "plt.title('England Connectivity')\n",
    "plt.xlabel(\"Longitude\")\n",
    "plt.ylabel(\"Latitude\")\n",
    "plt.savefig(\"England_connectivity.png\")    \n",
    "plt.show()\n",
    "\n",
    "#print(longitude)\n",
    "#print(starting_time)\n",
    "\n",
    "dat = np.array([particle_number, starting_longitude, ending_longitude, starting_lat, ending_lat, starting_time, ending_time])\n",
    "\n",
    "dat = dat.T\n",
    "\n",
    "np.savetxt('England.txt', dat ,header = 'particle number               starting longitude         ending longitude          starting latitude          ending latitude            start time              end time',delimiter = ',')\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
